1	2
CodeBrowser: licenselab:/veriT_part1
File Edit Analysis Graph Navigation Search Select Tools Window Help
r ^ * ■14:40
Program Trees	|oj & ^ X	
▼ &f veriT_partl (3 -bss [3 .data [3 .got.plt 0 -got □ dynamic 0 data.rel.ro 0 fini array 0 nit array 0 eh frame 0 eh_frame_hdr	▲ J t ▼
123 Listing: veriT_partl
Decompile: FUN_001bf990 - (veriT_partl)
Program Tree x
-ff Symbol Tree
►	Ek mports ►	IO Exports ▼	E© Functions ►	f entry' ►	ER fun_ooi ►	Or hash_ ▼	O^ m	
▼ f; main	
P^ argc	▼
Filter:
□L Data Type Manager
▼ X
►	£ BuiltlnTypes
►	£©veriT_partl
►	i0 generic_clib_64
X
001bf9f7 83	f8	ff	CMP	EAX,-0x1 001bf9fa 0f	84	70	JZ	LAB_001bfb70 01 00 00 001bfa00 83	c0	01	ADD	EAX,0x1 001bfa03 89	ee	MOV	ESI,EBP 001bfa05 4c	89	e7	MOV	RDI.R12 001bfa08 41	89	07	MOV	dword ptr [R15],EAX 001bfa0b e8	10	c5	CALL	FUN_0018bf20 fc ff 001bfal0 41	89	lc	24	MOV	dword ptr [R12],EBX 001bfal4 4c	89	e7	MOV	RDI.R12 001bfal7 e8	b4	d8	CALL	FUN_0018d2d0 fc ff 001bfalc 89	44	24	0c	MOV	dword ptr [RSP + local_3c],EAX 301bfa20 f6	05	99	TEST	byte ptr [DAT_final_setter],0x4 3d 03 00 04 001bfa27 74 0a	JZ	LAB_001bfa33 001bfa29 c7 05 e5	MOV	dword ptr [DAT_final_check],0x1 4c 03 00 01 00 00 00 LAB_001bfa33	XREF[1]:	001bfa27(j) 001bfa33 4c	03	35	ADD	R14,qword	ptr	[DAT_001f3900] c6 3e 03 00 001bfa3a 41	8b	le	MOV	EBX,dword	ptr	[R14] 001bfa3d 85	db	TEST	EBX,EBX 001bfa3f 0f	84	lb	JZ	LAB_001bfb60 01 00 00 001bfa45 83	eb	01	SUB	EBX,0x1 001bfa48 41	89	le	MOV	dword ptr [R14],EBX 001bfa4b 0f	85	f5	JNZ	LAB_001bfb46 00 00 00 001bfa51 4c	8b	05	MOV	R8,qword ptr	[DAT_001f38c8] 70 3e 03 00	▲ • ► ▼		19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50		uint uVarl6; long lVarl7; uint uVarl8; int *piVarl9; long lVar20; ulong uVar9; if (*(int *)(DAT_001f38e0 + (param_2 & Oxffffffff) * 4) uVar4 = FUN_00199160(DAT_001f3850); } else { uVar4 = FUN_00199160(DAT_001f3740); } uVarl2 = (ulong)uVar4; piVarl9 = (int *)(DAT_001f3900 + uVarl2 * 4); if (*piVarl9 != -1) { *piVarl9 = *piVarl9 + 1; puVar7 = (undefined4 *)FUN_0018c960(); if (*piVarl9 != -1) { *piVarl9 = *piVarl9 + 1; FUN_0018bf20(puVar7,uVar4); *puVar7 = param_l; uVar5 = FUN_0018d2d0(puVar7); if ((DAT_final_setter & 4) != 0) { DAT_final_check = 1; } piVarl9 = (int *)(uVarl2 * 4 + DAT_001f3900); iVarl5 = *piVarl9; if (iVarl5 == 0) { /* WARNING: Subroutine does not return my_error("DAG_gc_dec: under limit\n"); }	
				C		
					/Decompile: FUN_001bf990 x j — Defined Strings x	
== DAT_001f38d0) {
Console - Scripting
Filter:
001bfa20
FUN_001bf990
TEST byte ptr [0x001f37c0].0...